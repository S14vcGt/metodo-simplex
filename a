using DataFrames  # Importar DataFrames

include("solver.jl")
include("output.jl")
include("input.jl")
import .Solver, .Output, .Input

# Funciones de datos de prueba
function datos_prueba()
    tabla = [
        [1, -2, -5, -8, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 0, 0, 12],
        [0, 8, -4, 4, 0, 1, 0, 24],
        [0, 0, 1, 1, 0, 0, 1, 8]
    ]
    return tabla
end

function simplex()
    solucion = 0
    if true
        prueba = Solver.getSolucion(datos_prueba(), true)
        solucion = Solver.maximizar(prueba)
    else
        solucion = dosFases(entrada)
    end
    final = join(solucion.Textual)
    
    # Imprimir salida entendible
    println("========== RESULTADOS ==========")
    Output.escribirTablaIntermedia(solucion.Historial)
    Output.escribirTablaFinal(DataFrame(solucion.Tabular, :auto))
    Output.escribirSolucion(final)
    println("================================")
end

function dosFases(entrada)
    prueba = Solver.getSolucion(tabla[3], entrada[2])
end

simplex()


module Output

using DataFrames

function escribirSolucion(sol::String)
    println("\nSoluciÃ³n Final:\n")
    println(sol)
end

function escribirTablaFinal(sol::DataFrame)
    println("\nLa Tabla Final es:\n")
    println(sol)
end

function escribirTablaIntermedia(tablas::Set{Vector{Vector{Float64}}})
    println("\nTablas Intermedias:\n")
    foreach(tabla -> escribirVector(DataFrame(tabla, :auto)), tablas)
end

function escribirVector(tabla::DataFrame)
    println("\nTabla Intermedia:\n")
    println(tabla)
    println()
end

end
